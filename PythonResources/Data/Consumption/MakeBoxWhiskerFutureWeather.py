#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Created on Tue Dec 10 11:37:23 2024 by casper
First generated by cborg.lbl.gov then modified.
"""

import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
import glob
import os

# Specify the pattern for EPW files
FILE_PATTERN = os.path.join('/home/casper/gitRepo/thermal-grid-jba/PythonResources/Data/Weather/Future/*.epw')

def read_epw_files(file_pattern):
    """Reads multiple EPW files and returns a DataFrame with dry-bulb temperatures."""
    all_data = []
    
    # Use glob to find all files matching the pattern
    for file in glob.glob(file_pattern):
        # Read the EPW file
        df = pd.read_csv(file, skiprows=8, header=None)
        
        # Extract the dry-bulb temperature column (column 7, index 6)
        dry_bulb_temp = df[6]
        
        # Create a DataFrame with the date and dry-bulb temperature
        # Assuming the first four columns contain year, month, day, and hour
        year = df[0] # This will be overriden to 2040
        month = df[1]
        day = df[2]
        hour = df[3] - 1 # converts 1 to 24 to 0 to 23
        
        # Combine year, month, day, and hour into a single datetime column
        date_time = pd.to_datetime('2040' + '-' + 
                                   month.astype(str).str.zfill(2) + '-' + 
                                   day.astype(str).str.zfill(2) + ' ' + 
                                   hour.astype(str).str.zfill(2) + ':00', 
                                   format='%Y-%m-%d %H:%M')
        method = "NOTFOUND"
        for methods in ['ACCESS', 'BCC', 'CNRM', 'MPI', 'MRI', 'NORESM2', 'TMY3']:
            if methods in file:
                method = methods
        all_data.append(pd.DataFrame({'DateTime': date_time, 'DryBulbTemp': dry_bulb_temp, 'Method': method}))

    # Concatenate all DataFrames into one
    combined_data = pd.concat(all_data, ignore_index=True)
    return combined_data

def plot_temperature_time_series(data):
    """Plots dry-bulb temperatures from multiple EPW files."""
    plt.figure(figsize=(12, 6))
    
    for method, group in data.groupby('Method'):
        plt.plot(group['DateTime'], group['DryBulbTemp'], label=method)

    plt.title('Dry-Bulb Temperature Time Series Comparison')
    plt.xlabel('DateTime')
    plt.ylabel('Dry-Bulb Temperature (°C)')
    plt.legend()
    plt.grid()
    plt.xticks(rotation=45)
    plt.tight_layout()
    plt.show()

# def plot_box_whisker(data):
#     """Creates box-and-whisker plots for comparing the distribution of dry-bulb temperatures across methods."""
#     plt.figure(figsize=(12, 6))
    
#     # Calculate the median for each method
#     median_values = data.groupby('Method')['DryBulbTemp'].median()
    
#     # Create a custom order for the methods
#     sorted_methods = ['TMY3'] + median_values.drop('TMY3').sort_values().index.tolist()
    
#     # Set the order of the methods in the DataFrame
#     data['Method'] = pd.Categorical(data['Method'], categories=sorted_methods, ordered=True)
    
#     # Create a box plot using seaborn
#     sns.boxplot(x='Method', y='DryBulbTemp', data=data, order=sorted_methods, palette='Set2')
        
#     plt.title('Box-and-Whisker Plot of Dry-Bulb Temperature by Method')
#     plt.xlabel('Method')
#     plt.ylabel('Dry-Bulb Temperature (°C)')
#     plt.xticks(rotation=45)
#     plt.grid()
#     plt.tight_layout()
#     plt.show()

def plot_box_whisker(data):
    """Creates box-and-whisker plots for comparing the distribution of dry-bulb temperatures across methods."""
    plt.figure(figsize=(12, 6))
    
    # Calculate the median for each method
    median_values = data.groupby('Method')['DryBulbTemp'].median()
    
    # Create a custom order for the methods
    sorted_methods = ['TMY3'] + median_values.drop('TMY3').sort_values().index.tolist()
    
    # Set the order of the methods in the DataFrame
    data['Method'] = pd.Categorical(data['Method'], categories=sorted_methods, ordered=True)
    
    # Create a box plot using seaborn
    ax = sns.boxplot(x='Method', y='DryBulbTemp', data=data, order=sorted_methods, palette='Set2')
    
    # Annotate the median values on the median lines
    for i, method in enumerate(sorted_methods):
        median_value = median_values[method]
        median_value_f = median_value /5*9 + 32
        ax.text(i, median_value, f'{median_value:.1f} C\n{median_value_f:.1f} F', 
                horizontalalignment='center', 
                verticalalignment='center', 
                color='black', 
                fontsize=10, 
                weight='bold')

    plt.title('Box-and-Whisker Plot of Dry-Bulb Temperature by Method')
    plt.xlabel('Method')
    plt.ylabel('Dry-Bulb Temperature (°C)')
    plt.xticks(rotation=45)
    plt.grid()
    plt.tight_layout()
    plt.show()

# Main execution
if __name__ == "__main__":
    # Read the EPW files and get the data
    weather_data = read_epw_files(FILE_PATTERN)
    
    # Plot the temperature time series
    # plot_temperature_time_series(weather_data)
    
    # Plot the box-and-whisker plots
    plot_box_whisker(weather_data)