def write_latex_capacity_table(r,
                               nBui = None):
    """ Returns texts for a latex table.
        Requires the `unyt` package for unit handling.
        r : BuildingsPy Reader object;
        nBui : Number of ETS, if not given will read `nBui` from mat file.
    """
    # yt.define_unit("MWh", 1E-6/3600 * yt.Unit("J"))
    
    # conversion factors
    conv_W_kBH = 3.412141633 * 1e-3 # W to kBtu/hr
    conv_W_RT = 3.412141633 / 12000 # W to refrigeration ton
    conv_m3_gal = 264.1720523581 # m3 to US liquid gallon
    conv_kgs_m3h_air = 1 / 1.293 * 3600 # air kg/s to m3/h
    conv_kgs_cfm_air = 1 / 1.293 * 35.3147 * 60 # air kg/s to cfm
    conv_J_MWh = 1 / 3.6e9 # J to MWh
    conv_J_MMBtu = 1 / 1.055055852e9 # J to MMBtu
    conv_kgs_gpm_h2o = 1 * 15.85032 # water kg/s to gpm
    conv_kgs_gpm_glycol = conv_kgs_gpm_h2o / 1.1132 # glycol kg/s to gpm
        # using water factor & glycol density
    conv_Pa_psi = 1 / 6894.76 # Pa to psi
    conv_m_ft = 3.28084 # m to ft

    def read_parameter(varName):
        """ Returns the first value of a series read from mat file.
        """
        (t, y) = r.values(varName)
        return y[0]

    def read_max_abs(varName):
        """ Returns the max of abs of a series read from the mat file.
        """
        return max(r.max(varName), abs(r.min(varName)))

    def write_row(val,
                  desc,
                  factor_si,
                  factor_ip,
                  display_si,
                  display_ip,
                  format_si = ',.0f',
                  format_ip = ',.0f'):

        """ Returns one row for the latex table.
            `val`           input value,
            `desc`          description,
            `factor_si`     conversion factor to si unit,
            `factor_ip`     conversion factor to ip unit,
            `display_si`    text for the si unit,
            `display_ip`    text for the ip unit,
            `format_si`     format control string of the si number,
            `format_ip`     format control string of the ip number.
        """

        tab = ""
        
        val_si = val * factor_si
        val_ip = val * factor_ip
        tab += f" & {desc} & {val_si:{format_si}} & {display_si} & {val_ip:{format_ip}} & {display_ip} \\\\\n"

        return tab

    ### main function ###

    if nBui is None:
        nBui = int(read_parameter('nBui'))

    # header
    tab = ""
    tab += r"% generated by `write_latex_capacity_table()` in PythonResources/RunCases/post_process_write_latex_table.py"
    tab += "\n\n"
    tab += "\\begin{tabular}{llrlrl}\n"
    tab += "\\toprule\n"
    tab += " & System capacity & \\multicolumn{2}{c}{SI unit} & \\multicolumn{2}{c}{IP unit} \\\\\n"
    tab += "\\hline\n"

    # main body
    ## ETS
    for i in range(1,nBui+1):

        # chiller
        tab += f"ETS {i}" # This will go bofore the `&` of the first row

        tab += write_row(val = read_parameter(f'bui[{i}].ets.heaPum.heaPum.QHea_flow_nominal'),
                         desc = "Heat recovery chiller - heating",
                         factor_si = 1e-3,
                         factor_ip = conv_W_kBH,
                         display_si = "kW",
                         display_ip = "kBtu/hr")

        tab += write_row(val = abs(read_parameter(f'bui[{i}].ets.heaPum.heaPum.QCoo_flow_nominal')),
                         desc = "Heat recovery chiller - cooling",
                         factor_si = 1e-3,
                         factor_ip = conv_W_RT,
                         display_si = "kW",
                         display_ip = "ton")

        # hex
        tab += write_row(val = read_parameter(f'bui[{i}].hexSiz.Q_flow_nominal'),
                         desc = "District heat exchanger",
                         factor_si = 1e-3,
                         factor_ip = conv_W_kBH,
                         display_si = "kW",
                         display_ip = "kBtu/hr")

        # dhw
        if i != 1: # Bui[1] doesn't have dhw.
            tab += write_row(val = read_parameter(f'bui[{i}].datDhw.VTan'),
                             desc = "Domestic hot water tank",
                             factor_si = 1,
                             factor_ip = conv_m3_gal,
                             display_si = "m$^3$",
                             display_ip = "gal")

        tab += "\\hline\n"

    ## central plant
    tab += "Central plant"

    tab += write_row(val = read_parameter('cenPla.gen.heaPum.QHea_flow_nominal'),
                     desc = "Heat pump - heating",
                     factor_si = 1e-3,
                     factor_ip = conv_W_kBH,
                     display_si = "kW",
                     display_ip = "kBtu/hr")

    tab += write_row(val = abs(read_parameter('cenPla.gen.heaPum.QCoo_flow_nominal')),
                     desc = "Heat pump - cooling",
                     factor_si = 1e-3,
                     factor_ip = conv_W_RT,
                     display_si = "kW",
                     display_ip = "ton")

    # dry cooler
    tab += write_row(val = read_parameter('cenPla.gen.fanDryCoo.m_flow_nominal'),
                     desc = "Dry cooler - air side",
                     factor_si = conv_kgs_m3h_air,
                     factor_ip = conv_kgs_cfm_air,
                     display_si = "m3/h",
                     display_ip = "cfm")

    tab += write_row(val = read_parameter('cenPla.gen.pumDryCoo.m_flow_nominal'),
                     desc = "Dry cooler - glycol side",
                     factor_si = 1,
                     factor_ip = conv_kgs_gpm_glycol,
                     display_si = "kg/s",
                     display_ip = "gpm")

    # borefield
    tab += write_row(val = read_max_abs('EBorPer.y'),
                     desc = "Borefield perimeter zone",
                     factor_si = conv_J_MWh,
                     factor_ip = conv_J_MMBtu,
                     display_si = "MWh",
                     display_ip = "MMBtu")

    tab += write_row(val = read_max_abs('EBorCen.y'),
                     desc = "Borefield center zone",
                     factor_si = conv_J_MWh,
                     factor_ip = conv_J_MMBtu,
                     display_si = "MWh",
                     display_ip = "MMBtu")

    tab += "\\hline\n"

    ## district
    tab += "District network"

    tab += write_row(val = read_parameter('datDis.mPumDis_flow_nominal'),
                     desc = "Distribution pump flow rate",
                     factor_si = 1,
                     factor_ip = conv_kgs_gpm_h2o,
                     display_si = "kg/s",
                     display_ip = "gpm")

    tab += write_row(val = read_parameter('pumDis.dp_nominal'),
                     desc = "Distribution pump pressure rise",
                     factor_si = 1e-3,
                     factor_ip = conv_Pa_psi,
                     display_si = "kPa",
                     display_ip = "psi")

    # length of pipes
    l = 0
    for i in range(1,nBui+2):
        l += read_parameter(f'datDis.lDis[{i}]')
    tab += write_row(val = l,
                     desc = "District piping",
                     factor_si = 1,
                     factor_ip = conv_m_ft,
                     display_si = "m",
                     display_ip = "ft")

    l = 0
    for i in range(1,nBui+1):
        l += read_parameter(f'datDis.lCon[{i}]') * 2
    tab += write_row(val = l,
                     desc = "Connection piping",
                     factor_si = 1,
                     factor_ip = conv_m_ft,
                     display_si = "m",
                     display_ip = "ft")

    # footer
    tab += "\\bottomrule\n"
    tab += "\\end{tabular}"

    return tab
