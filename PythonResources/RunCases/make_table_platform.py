#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Created on Wed Jun 18 21:40:30 2025

@author: casper
"""

import os
import pandas as pd
import numpy as np
from GetVariables import *
from def_calc_cost import *
from buildingspy.io.outputfile import Reader

#CWD = os.getcwd()
CWD = os.path.dirname(os.path.abspath(__file__))
mat_file_name = os.path.join(CWD, "simulations", "2025-06-25", "2025-06-25-03d5ec91-DetailedPlantFiveHubs.mat")

nBui = 5

#%%
conv_J_kWh = 1 / 3.6e6
conv_J_MWh = 1 / 3.6e9 # J to MWh
conv_Wh_Btu = 3.412141633 # Wh to Btu
conv_MW_MMBH = conv_Wh_Btu * 1e3 # MW to MMBtu/hr
#conv_W_kBH = 3.412141633 * 1e-3 # W to kBtu/hr
conv_MW_RT = conv_Wh_Btu / 12000 * 1e6 # MW to refrigeration ton
#conv_W_RT = 3.412141633 / 12000 # W to refrigeration ton

#%%
r=Reader(mat_file_name, "dymola")

#%%
def read_parameter(varName):
    """ Returns the first value of a series read from mat file.
    """
    (t, y) = r.values(varName)
    return y[0]

def read_last(varName):
    """ Returns the last value of a series read from mat file.
    """
    (t, y) = r.values(varName)
    return np.array(y)[-1]

def read_max_abs(varName):
    """ Returns the max of abs of a series read from the mat file.
    """
    return max(r.max(varName), abs(r.min(varName)))

def sum_elements_series(varPattern):
    """ Returns a series of the sum of all variables that fit the regex pattern.
    """
    varnames = r.varNames(varPattern)
    (_t, _y) = r.values(varnames[0])
    y = np.zeros(len(_t))
    
    for var in varnames:
        (_t, _y) = r.values(var)
        y += _y
        
    return y

def sum_elements_parameter(varPattern):
    """ Returns the sum of the varname[0] for all varname that fits the regex pattern.
    """
    varnames = r.varNames(varPattern)
    y = 0.
    
    for var in varnames:
        y += read_parameter(var)
    
    return y

def construct_df(varNames):
    """ Construct a pandas datafram with the given variable names.
          'Time' will be added as well.
        This is for compatibility with functions from GetVariables.
    """
    data = {}
    (_t, _y) = r.values(varNames[0])
    data['Time'] = _t
    
    for var in varNames:
        (_t, _y) = r.values(var)
        data[var] = _y
    
    df= pd.DataFrame(data)
    
    return df    

def print_row(desc,
              valu,
              conv,
              form,
              unit
              ):
    
    print(f'{desc}: {valu*conv:{form}} {unit}')
    
#%%
def write_table_guiding_values():
    
    def write_row_leading(s : str):
        
        return f"\\multicolumn{{2}}{{l|}}{{{s}}} & \\multicolumn{{4}}{{c|}}{{ }} & \\multicolumn{{4}}{{c}}{{ }} \\\\\n"
    
    def write_row_values(desc,
                         valu_milp,
                         valu_mdlc,
                         format_si,
                         format_ip,
                         unit_si,
                         unit_ip,
                         conv):
                
        tab = f"& {desc} &"
        
        # MILP columns
        if isinstance(valu_milp, (float, int)) and unit_si != unit_ip:
            valu_milp_ip = valu_milp * conv
            tab += f"{valu_milp:{format_si}} & {unit_si} & {valu_milp_ip:{format_ip}} & {unit_ip} & "
        elif isinstance(valu_milp, (float, int)):
            tab += f"{valu_milp:{format_si}} & {unit_si}" + "& " * 3
        else:
            tab += f"{valu_milp} & {unit_si}" + "& " * 3
            
        
        # Modelica columns
        if isinstance(valu_mdlc, (float, int)) and unit_si != unit_ip:
            valu_mdlc_ip = valu_mdlc * conv
            tab += f"{valu_mdlc:{format_si}} & {unit_si} & {valu_mdlc_ip:{format_ip}} & {unit_ip} \\\\\n"
        elif isinstance(valu_mdlc, (float, int)):
            tab += f"{valu_mdlc:{format_si}} & {unit_si}" + "& " * 2 + "\\\\\n"
        else:
            tab += f"{valu_mdlc} & {unit_si}" + "& " * 2 + "\\\\\n"
        
        return tab
    
    tab = ""
    
    # header
    tab += r"% generated by xxx"
    tab += "\n\n"
    tab += "\\begin{tabular}{ll|rlrl|rlrl}\n"
    tab += "\\toprule\n"
    tab += "\\multicolumn{2}{c}{Guideline values} & \\multicolumn{4}{c}{MILP platform} & \\multicolumn{4}{c}{Modelica platform} \\\\\n"
    tab += "\\hline\n"
    
    # main body
    
    # ETS HP capacity
    footnote = r"\footnote{The MILP considers the capacities of the three utility productions separately, while in Modelica it is modeled as one single piece of equipment with coupled heating and cooling capacities.}"
    tab += write_row_leading('ETS heat pump total capacity ' + footnote + '\n')
    
    valu_mdlc = abs(sum_elements_parameter("bui\[.\].ets.heaPum.heaPum.QHea_flow_nominal")) * 1e-6
    tab += write_row_values(desc = "condenser (space heating)",
                            valu_milp = 6.8,
                            valu_mdlc = valu_mdlc,
                            format_si = ".1f",
                            format_ip = ",.0f",
                            unit_si = "MW",
                            unit_ip = "MMBtu/hr",
                            conv = conv_MW_MMBH)
    
    valu_mdlc = abs(sum_elements_parameter("bui\[.\].ets.heaPum.heaPum.QHea_flow_nominal")) * 1e-6
    tab += write_row_values(desc = "condenser (DHW)",
                            valu_milp = 2.0,
                            valu_mdlc = valu_mdlc,
                            format_si = ".1f",
                            format_ip = ",.0f",
                            unit_si = "MW",
                            unit_ip = "MMBtu/hr",
                            conv = conv_MW_MMBH)
    
    valu_mdlc = abs(sum_elements_parameter("bui\[.\].ets.heaPum.heaPum.QCoo_flow_nominal")) * 1e-6
    tab += write_row_values(desc = "evaporator (cooling)",
                            valu_milp = 10.1,
                            valu_mdlc = valu_mdlc,
                            format_si = ".1f",
                            format_ip = ",.0f",
                            unit_si = "MW",
                            unit_ip = "ton",
                            conv = conv_MW_RT)
    
    tab += "\\hline\n"
    
    # ETS HP COP
    tab += write_row_leading('ETS heat pump average COP')
    
    ets_modes = ['overall',
                 'heating only',
                 'cooling only',
                 'simultaneous']
    Q_ets = {mode : 0. for mode in ets_modes}
    P_ets = {mode : 0. for mode in ets_modes}
    
    for i in range(1,6):
        df_etsHp = construct_df([f'bui[{i}].ets.heaPum.heaPum.QCon_flow',
                                  f'bui[{i}].ets.heaPum.heaPum.QEva_flow',
                                  f'bui[{i}].ets.heaPum.heaPum.P',
                                  f'bui[{i}].ets.heaPum.con.hea.y',
                                  f'bui[{i}].ets.heaPum.con.uCoo'])
        
        conditions = dict()
        conditions['heating'] = np.array(df_etsHp[f'bui[{i}].ets.heaPum.con.hea.y'] > 0.9)
        conditions['cooling'] = np.array(df_etsHp[f'bui[{i}].ets.heaPum.con.uCoo'] > 0.9)
        conditions['overall']      = np.logical_or(conditions['heating'], conditions['cooling'])
        conditions['heating only'] = np.logical_and(conditions['heating'], np.logical_not(conditions['cooling']))
        conditions['cooling only'] = np.logical_and(np.logical_not(conditions['heating']), conditions['cooling'])
        conditions['simultaneous'] = np.logical_and(conditions['heating'], conditions['cooling'])
        
        for mode in ets_modes:
            Q_ets[mode] += integrate_with_condition(df_etsHp, f'bui[{i}].ets.heaPum.heaPum.QCon_flow',
                                                    condition = conditions[mode])
            P_ets[mode] += integrate_with_condition(df_etsHp, f'bui[{i}].ets.heaPum.heaPum.P',
                                                    condition = conditions[mode])
    
    footnote = r'\footnote{The high ETS cooling COP is achieved by rejecting heat to the district at a temperature as low as $16\degree \mathrm{C}$ ($86\degree \mathrm{F}$)}'
    desc_mode = {'overall' : 'overall',
                 'heating only' : 'heating',
                 'cooling only' : 'cooling ' + footnote + '\n',
                 'simultaneous' : 'simultaneous'}
    valu_milp_mode = {'overall' : 5.6,
                     'heating only' : 4.5,
                     'cooling only' : 6.0,
                     'simultaneous' : 'N/A'}
    for mode in ets_modes:
        valu_mdlc = Q_ets[mode] / P_ets[mode]
        tab += write_row_values(desc = desc_mode[mode],
                                valu_milp = valu_milp_mode[mode],
                                valu_mdlc = valu_mdlc,
                                format_si = ".1f",
                                format_ip = ".1f",
                                unit_si = "",
                                unit_ip = "",
                                conv = 1.)
    
    tab += "\\hline\n"
    
    # central HP capacity
    tab += write_row_leading('Central plant heat pump capacity')
    
    valu_mdlc = abs(read_parameter("cenPla.gen.heaPum.QHea_flow_nominal")) * 1e-6
    tab += write_row_values(desc = 'heating',
                            valu_milp = 4.4,
                            valu_mdlc = valu_mdlc,
                            format_si = ".1f",
                            format_ip = ",.0f",
                            unit_si = "MW",
                            unit_ip = "MMBtu/hr",
                            conv = conv_MW_MMBH)
    
    valu_mdlc = abs(read_parameter("cenPla.gen.heaPum.QCoo_flow_nominal")) * 1e-6
    tab += write_row_values(desc = "cooling",
                            valu_milp = 8.7,
                            valu_mdlc = valu_mdlc,
                            format_si = ".1f",
                            format_ip = ",.0f",
                            unit_si = "MW",
                            unit_ip = "ton",
                            conv = conv_MW_RT)
    
    tab += "\\hline\n"
    
    # central HP COP
    tab += write_row_leading('Central plant heat pump average COP')
    
    df_cenHp = construct_df(['cenPla.gen.heaPum.QCon_flow',
                              'cenPla.gen.heaPum.QEva_flow',
                              'cenPla.gen.heaPum.P',
                              'cenPla.gen.heaPum.hea'])
    
    condition = np.array(df_cenHp['cenPla.gen.heaPum.hea'] > 0.9) # heating mode
    valu_mdlc = integrate_with_condition(df_cenHp, 'cenPla.gen.heaPum.QCon_flow',
                                         condition = condition) / \
                integrate_with_condition(df_cenHp, 'cenPla.gen.heaPum.P',
                                         condition = condition)
    tab += write_row_values(desc = 'heating',
                            valu_milp = 4.81,
                            valu_mdlc = valu_mdlc,
                            format_si = ".1f",
                            format_ip = ".1f",
                            unit_si = "",
                            unit_ip = "",
                            conv = 1.)
    
    condition = np.array(df_cenHp['cenPla.gen.heaPum.hea'] < 0.1) # cooling mode
    valu_mdlc = integrate_with_condition(df_cenHp, 'cenPla.gen.heaPum.QEva_flow',
                                         condition = condition) / \
                integrate_with_condition(df_cenHp, 'cenPla.gen.heaPum.P',
                                         condition = condition)
    tab += write_row_values(desc = 'cooling',
                            valu_milp = 4.67,
                            valu_mdlc = valu_mdlc,
                            format_si = ".1f",
                            format_ip = ".1f",
                            unit_si = "",
                            unit_ip = "",
                            conv = 1.)
    
    tab += "\\hline\n"
    
    # BTES capacity
    tab += write_row_leading('BTES capacity')
    valu_mdlc = (read_max_abs("EBorPer.y") + read_max_abs("EBorCen.y")) * conv_J_MWh
    tab += write_row_values(desc = ' ',
                            valu_milp = 4750,
                            valu_mdlc = valu_mdlc,
                            format_si = ",.0f",
                            format_ip = ",.0f",
                            unit_si = "MWh",
                            unit_ip = "MMBtu",
                            conv = conv_Wh_Btu)
    
    # print('PV capacity: 8.68 MWp (directly using MILP value)')
    # print('Battery capacity: 4.36 MWh (directly using MILP value)')
    
    # footer
    tab += "\\bottomrule\n"
    tab += "\\end{tabular}"
    
    return tab
    
def write_table_economic_requirements():
    print_row(desc = 'Imported energy',
              valu = read_last("ETot.y"),
              conv = J_to_MWh,
              form = ',.0f',
              unit = 'MWh'
              )
    
    print_row(desc = 'Peak electricity import',
              valu = read_max_abs("multiSum.y"),
              conv = 1e-3,
              form = '.0f',
              unit = 'kW'
              )
    
    print('Life-cycle cost: ** in progress **')
    print('Life-cycle cost: ** in progress **')
    print('Levelized cost of thermal energy: ** in progress **')
    print('')
    
def write_table_modelica_economics():
    
    def print_finance(desc,
                      key,
                      capa):
        
        If = costs[key][0]
        Iv = costs[key][1]
        C = capa
        l = costs[key][2]
        alpha = costs[key][3]
        
        unit = costs[key][4]
        
        finance = calc_finance(If, Iv, C, l, alpha)
        ALCC = finance[0]
        I = finance[2]
        
        print(f'{desc}:')
        print(' ' *4 + f'capacity = {capa:,.0f} {unit}')
        print(' ' *4 + f'ALCC = {ALCC:,.0f}, I = {I:,.0f}')
        
        return ALCC, I
    
    def print_direct(desc, capa, ALCC, I):
        
        print(f'{desc}:')
        print(' '*4 + f'capacity = {capa}')
        print(' '*4 + f'ALCC = {ALCC}, I = {I}')
    
    # [If: fixed cost, Iv: variable cost, l: lifetime, alpha: O&M, unit of capacity]
    costs = {"battery" : [0, 757, 15, 0.01, 'kWh'],
             "borefield" : [0, 1.5, 40, 0.005, 'kWh'],
             "piping" : [0, 1100, 40, 0.01, 'm'],
             "hp ets" : [19671, 2080, 20, 0.02, 'kW'],
             "hp plant" : [0, 1631, 20, 0.02, 'kW'],
             "pump coo" : [46404, 30, 20, 0.02, 'kW'],
             "pump hea" : [65479, 38, 20, 0.02, 'kW'],
             "pump dhw" : [6476, 4, 20, 0.02, 'kW'],
             "dhw storage" : [13800, 33, 20, 0.005, 'kWh']
             }

    """
    battery,
    borefield,
    dhc network,
    dhc service line,
    ele export,
    ele import,
    ets hp,
    plant hp,
    PV,
    pumps,
    water storage
    """
    
    _cp_wat = 4187 # J/kg K
    _rho_wat = 997 # kg/m3
    
    ALCC = 0
    I = 0
    
    print('## capacities read or computed from Modelica results ##')
    
    desc = "Borefield"
    key = "borefield"
    capa = (read_max_abs("EBorPer.y") + read_max_abs("EBorCen.y")) * conv_J_kWh
    ALCC, I = map(sum, zip(print_finance(desc, key, capa), (ALCC, I)))
    
    desc = "Network piping"
    key = "piping"
    capa = 0
    for i in range(1,nBui+2):
        capa += read_parameter(f'datDis.lDis[{i}]')
    ALCC, I = map(sum, zip(print_finance(desc, key, capa), (ALCC, I)))
    
    for i in range(1, nBui+1):
        desc = f"ETS {i} heat pump"
        key = "hp ets"
        capa = read_parameter(f'bui[{i}].ets.heaPum.heaPum.QHea_flow_nominal') * 1e-3
        ALCC, I = map(sum, zip(print_finance(desc, key, capa), (ALCC, I)))
        
        desc = f"ETS {i} connection piping"
        key = "piping"
        capa = read_parameter(f'datDis.lCon[{i}]')
        ALCC, I = map(sum, zip(print_finance(desc, key, capa), (ALCC, I)))
        
        desc = f"ETS {i} CHW pumping station"
        key = "pump coo"
        capa = abs(read_parameter(f'bui[{i}].QChiWat_flow_nominal')) * 1e-3
        ALCC, I = map(sum, zip(print_finance(desc, key, capa), (ALCC, I)))
        
        desc = f"ETS {i} HHW pumping station"
        key = "pump hea"
        capa = read_parameter(f'bui[{i}].QHeaWat_flow_nominal') * 1e-3
        ALCC, I = map(sum, zip(print_finance(desc, key, capa), (ALCC, I)))
        
        if i != 1:
            desc = f"ETS {i} DHW pumping station"
            key = "pump dhw"
            capa = read_parameter(f'bui[{i}].QHotWat_flow_nominal') * 1e-3
            ALCC, I = map(sum, zip(print_finance(desc, key, capa), (ALCC, I)))
            
            desc = f"ETS {i} DHW storage tank"
            key = "dhw storage"
            capa = (_cp_wat * _rho_wat * read_parameter(f'bui[{i}].datDhw.VTan') * \
                    (read_parameter(f'bui[{i}].datDhw.TDom_nominal') - read_parameter(f'bui[{i}].datDhw.TCol_nominal'))) \
                   * conv_J_kWh
            ALCC, I = map(sum, zip(print_finance(desc, key, capa), (ALCC, I)))
    
    desc = "Central plant heat pump"
    key = "hp plant"
    capa = read_parameter("cenPla.gen.heaPum.QHea_flow_nominal") * 1e-3
    ALCC, I = map(sum, zip(print_finance(desc, key, capa), (ALCC, I)))
    
    desc = "District pumping station"
    key = "pump hea"
    capa = read_parameter("cenPla.gen.heaPum.QHea_flow_nominal") * 1e-3
    ALCC, I = map(sum, zip(print_finance(desc, key, capa), (ALCC, I)))
    
    ## capacities directly taken from MILP
    
    desc = "Battery"
    key = "battery"
    capa = 4248 # kWh
    ALCC, I = map(sum, zip(print_finance(desc, key, capa), (ALCC, I)))
    
    desc = "PV"
    
    print(f'Total ALCC = {ALCC:,.0f}')
    print(f'Total Investment = {I:,.0f}')
    
#%%
#tab = write_table_guiding_values()
write_table_modelica_economics()
