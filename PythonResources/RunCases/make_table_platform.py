#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Created on Wed Jun 18 21:40:30 2025

@author: casper
"""

import os
import pandas as pd
import numpy as np
from GetVariables import *
from post_process_configurations import calc_finance
from buildingspy.io.outputfile import Reader

#CWD = os.getcwd()
CWD = os.path.dirname(os.path.abspath(__file__))
mat_file_name = os.path.join(CWD, "simulations", "2025-07-10", "2025-07-10-base-DetailedPlantFiveHubs.mat")
remarks = f'This table was generated by `{os.path.basename(__file__)}`'

nBui = 5

# conversion factors
conv_J_kWh = 1 / 3.6e6
conv_J_MWh = 1 / 3.6e9 # J to MWh
conv_J_GWh = 1 / 3.6e12 # J to GWh
conv_Wh_Btu = 3.412141633 # Wh to Btu
conv_MW_MMBH = conv_Wh_Btu * 1e3 # MW to MMBtu/hr
#conv_W_kBH = 3.412141633 * 1e-3 # W to kBtu/hr
conv_MW_RT = conv_Wh_Btu / 12000 * 1e6 # MW to refrigeration ton
#conv_W_RT = 3.412141633 / 12000 # W to refrigeration ton

#%% numbers from MILP results
# from "TEN + PV + battery" solution
_milp_ten_capEtsConHea = 6.2 # ETS condenser capacity, space heating, MW
_milp_ten_capEtsConDhw = 2.4 # ETS condenser capacity, dhw, MW
_milp_ten_capEtsEvaCoo = 11.1 # ETS evaporator capacity, cooling, MW

_milp_ten_copAvgEtsAll = 5.6 # ETS average COP, overall
_milp_ten_copAvgEtsHea = 4.8 # ETS average COP, heating
_milp_ten_copAvgEtsCoo = 7.0 # ETS average COP, cooling

_milp_ten_capPlaHpEva = 10.772 # central plant evaporator capacity, MW

_milp_ten_copPlaHpHea = 4.81 # central plant average COP, heating
_milp_ten_copPlaHpCoo = 4.66 # central plant average COP, cooling

_milp_ten_capBtes = 4750 # BTES capacity, MWh

_milp_ten_eneCos = 1742327.363 # USD/a
_milp_ten_eneImp = 11.997 # energy import, GWh/a

_milp_ten_lcoe = 0.2385 # LCOE, USD/kWh

##################
# Casper, to potentially be removed
_milp_ten_ALCC = 8936345.735 # total ALCC, USD/a
_milp_ten_ALCC_hpPla = 1419756.970 # plant heat pump ALCC, USD/a
_milp_ten_ALCC_borFie = 321447.722 # borefield ALCC, USD/a
_milp_ten_capPumDis_eco = 11294 # district pump capacity for economics, equivalent to central HP capacity, kW
_milp_ten_I = 102019208.9 # total investment, USD
#################

# from "GAS" solution
_milp_gas_eneCos = 4605839.795 # USD/a
_milp_gas_eneImp = 40.9 # energy import, GWh/a
_milp_gas_ALCC = 7816186.177 # total ALCC, USD/a
_milp_gas_I = 39276826.179 # total investment, USD

_milp_gas_lcoe = 0.2032 # LCOE, USD/kWh


#%% BuildingsPy reader
r=Reader(mat_file_name, "dymola")

#%%
def read_parameter(varName):
    """ Returns the first value of a series read from mat file.
    """
    (t, y) = r.values(varName)
    return y[0]

def read_last(varName):
    """ Returns the last value of a series read from mat file.
    """
    (t, y) = r.values(varName)
    return np.array(y)[-1]

def read_max_abs(varName):
    """ Returns the max of abs of a series read from the mat file.
    """
    return max(r.max(varName), abs(r.min(varName)))

def sum_elements_series(varPattern):
    """ Returns a series of the sum of all variables that fit the regex pattern.
    """
    varnames = r.varNames(varPattern)
    (_t, _y) = r.values(varnames[0])
    y = np.zeros(len(_t))
    
    for var in varnames:
        (_t, _y) = r.values(var)
        y += _y
        
    return y

def sum_elements_parameter(varPattern):
    """ Returns the sum of the varname[0] for all varname that fits the regex pattern.
    """
    varnames = r.varNames(varPattern)
    y = 0.
    
    for var in varnames:
        y += read_parameter(var)
    
    return y

def construct_df(varNames):
    """ Construct a pandas datafram with the given variable names.
          'Time' will be added as well.
        This is for compatibility with functions from GetVariables.
    """
    data = {}
    (_t, _y) = r.values(varNames[0])
    data['Time'] = _t
    
    for var in varNames:
        (_t, _y) = r.values(var)
        data[var] = _y
    
    df= pd.DataFrame(data)
    
    return df    

def print_row(desc,
              valu,
              conv,
              form,
              unit
              ):
    
    print(f'{desc}: {valu*conv:{form}} {unit}')
    
#%%
def write_table_guiding_values():
    
    def write_row_leading(s : str):
        
        return f"\\multicolumn{{2}}{{l|}}{{{s}}} & \\multicolumn{{4}}{{c|}}{{ }} & \\multicolumn{{4}}{{c}}{{ }} \\\\\n"
    
    def write_row_values(desc,
                         valu_milp,
                         valu_mdlc,
                         format_si,
                         format_ip,
                         unit_si,
                         unit_ip,
                         conv):
                
        tab = f"& {desc} &"
        
        # MILP columns
        if isinstance(valu_milp, (float, int)) and unit_si != unit_ip:
            valu_milp_ip = valu_milp * conv
            tab += f"{valu_milp:{format_si}} & {unit_si} & {valu_milp_ip:{format_ip}} & {unit_ip} & "
        elif isinstance(valu_milp, (float, int)):
            tab += f"{valu_milp:{format_si}} & {unit_si}" + "& " * 3
        else:
            tab += f"{valu_milp} & {unit_si}" + "& " * 3
            
        
        # Modelica columns
        if isinstance(valu_mdlc, (float, int)) and unit_si != unit_ip:
            valu_mdlc_ip = valu_mdlc * conv
            tab += f"{valu_mdlc:{format_si}} & {unit_si} & {valu_mdlc_ip:{format_ip}} & {unit_ip} \\\\\n"
        elif isinstance(valu_mdlc, (float, int)):
            tab += f"{valu_mdlc:{format_si}} & {unit_si}" + "& " * 2 + "\\\\\n"
        else:
            tab += f"{valu_mdlc} & {unit_si}" + "& " * 2 + "\\\\\n"
        
        return tab
    
    tab = ""
    
    # header
    tab += f"% {remarks}\n\n"
    tab += "\n\n"
    tab += "\\begin{tabular}{ll|rlrl|rlrl}\n"
    tab += "\\toprule\n"
    tab += "\\multicolumn{2}{c}{Guideline values} & \\multicolumn{4}{c}{MILP platform} & \\multicolumn{4}{c}{Modelica platform} \\\\\n"
    tab += "\\hline\n"
    
    # main body
    
    # ETS HP capacity
    footnote = r"\footnote{The MILP considers the capacities of the three utility productions separately, while in Modelica it is modeled as one single piece of equipment with coupled heating and cooling capacities.}"
    tab += write_row_leading('ETS heat pump total capacity ' + footnote + '\n')
    
    valu_mdlc = abs(sum_elements_parameter("bui\[.\].ets.heaPum.heaPum.QHea_flow_nominal")) * 1e-6
    tab += write_row_values(desc = "condenser (space heating)",
                            valu_milp = _milp_ten_capEtsConHea,
                            valu_mdlc = valu_mdlc,
                            format_si = ".1f",
                            format_ip = ",.0f",
                            unit_si = "MW",
                            unit_ip = "MMBtu/hr",
                            conv = conv_MW_MMBH)
    
    valu_mdlc = abs(sum_elements_parameter("bui\[.\].ets.heaPum.heaPum.QHea_flow_nominal")) * 1e-6
    tab += write_row_values(desc = "condenser (DHW)",
                            valu_milp = _milp_ten_capEtsConDhw,
                            valu_mdlc = valu_mdlc,
                            format_si = ".1f",
                            format_ip = ",.0f",
                            unit_si = "MW",
                            unit_ip = "MMBtu/hr",
                            conv = conv_MW_MMBH)
    
    valu_mdlc = abs(sum_elements_parameter("bui\[.\].ets.heaPum.heaPum.QCoo_flow_nominal")) * 1e-6
    tab += write_row_values(desc = "evaporator (cooling)",
                            valu_milp = _milp_ten_capEtsEvaCoo,
                            valu_mdlc = valu_mdlc,
                            format_si = ".1f",
                            format_ip = ",.0f",
                            unit_si = "MW",
                            unit_ip = "ton",
                            conv = conv_MW_RT)
    
    tab += "\\hline\n"
    
    # ETS HP COP
    tab += write_row_leading('ETS heat pump average COP')
    
    ets_modes = ['overall',
                 'heating only',
                 'cooling only',
                 'simultaneous']
    Q_ets = {mode : 0. for mode in ets_modes}
    P_ets = {mode : 0. for mode in ets_modes}
    
    for i in range(1,6):
        df_etsHp = construct_df([f'bui[{i}].ets.heaPum.heaPum.QCon_flow',
                                  f'bui[{i}].ets.heaPum.heaPum.QEva_flow',
                                  f'bui[{i}].ets.heaPum.heaPum.P',
                                  f'bui[{i}].ets.heaPum.con.hea.y',
                                  f'bui[{i}].ets.heaPum.con.uCoo'])
        
        conditions = dict()
        conditions['heating'] = np.array(df_etsHp[f'bui[{i}].ets.heaPum.con.hea.y'] > 0.9)
        conditions['cooling'] = np.array(df_etsHp[f'bui[{i}].ets.heaPum.con.uCoo'] > 0.9)
        conditions['overall']      = np.logical_or(conditions['heating'], conditions['cooling'])
        conditions['heating only'] = np.logical_and(conditions['heating'], np.logical_not(conditions['cooling']))
        conditions['cooling only'] = np.logical_and(np.logical_not(conditions['heating']), conditions['cooling'])
        conditions['simultaneous'] = np.logical_and(conditions['heating'], conditions['cooling'])
        
        for mode in ets_modes:
            Q_ets[mode] += integrate_with_condition(df_etsHp, f'bui[{i}].ets.heaPum.heaPum.QCon_flow',
                                                    condition = conditions[mode])
            P_ets[mode] += integrate_with_condition(df_etsHp, f'bui[{i}].ets.heaPum.heaPum.P',
                                                    condition = conditions[mode])
    
    footnote = r'\footnote{The high ETS cooling COP is achieved by rejecting heat to the district at a temperature as low as $16\degree \mathrm{C}$ ($86\degree \mathrm{F}$)}'
    desc_mode = {'overall' : 'overall',
                 'heating only' : 'heating',
                 'cooling only' : 'cooling ' + footnote + '\n',
                 'simultaneous' : 'simultaneous'}
    valu_milp_mode = {'overall' : _milp_ten_copAvgEtsAll,
                      'heating only' : _milp_ten_copAvgEtsHea,
                      'cooling only' : _milp_ten_copAvgEtsCoo,
                      'simultaneous' : 'N/A'}
    for mode in ets_modes:
        valu_mdlc = Q_ets[mode] / P_ets[mode]
        tab += write_row_values(desc = desc_mode[mode],
                                valu_milp = valu_milp_mode[mode],
                                valu_mdlc = valu_mdlc,
                                format_si = ".1f",
                                format_ip = ".1f",
                                unit_si = "",
                                unit_ip = "",
                                conv = 1.)
    
    tab += "\\hline\n"
    
    # central HP capacity
    tab += write_row_leading('Central plant heat pump capacity')
    
    valu_mdlc = abs(read_parameter("cenPla.gen.heaPum.QCoo_flow_nominal")) * 1e-6
    tab += write_row_values(desc = "cooling",
                            valu_milp = _milp_ten_capPlaHpEva,
                            valu_mdlc = valu_mdlc,
                            format_si = ".1f",
                            format_ip = ",.0f",
                            unit_si = "MW",
                            unit_ip = "ton",
                            conv = conv_MW_RT)
    
    tab += "\\hline\n"
    
    # central HP COP
    tab += write_row_leading('Central plant heat pump average COP')
    
    df_cenHp = construct_df(['cenPla.gen.heaPum.QCon_flow',
                              'cenPla.gen.heaPum.QEva_flow',
                              'cenPla.gen.heaPum.P',
                              'cenPla.gen.heaPum.hea'])
    
    condition = np.array(df_cenHp['cenPla.gen.heaPum.hea'] > 0.9) # heating mode
    valu_mdlc = integrate_with_condition(df_cenHp, 'cenPla.gen.heaPum.QCon_flow',
                                         condition = condition) / \
                integrate_with_condition(df_cenHp, 'cenPla.gen.heaPum.P',
                                         condition = condition)
    tab += write_row_values(desc = 'heating',
                            valu_milp = _milp_ten_copPlaHpHea,
                            valu_mdlc = valu_mdlc,
                            format_si = ".1f",
                            format_ip = ".1f",
                            unit_si = "",
                            unit_ip = "",
                            conv = 1.)
    
    condition = np.array(df_cenHp['cenPla.gen.heaPum.hea'] < 0.1) # cooling mode
    valu_mdlc = integrate_with_condition(df_cenHp, 'cenPla.gen.heaPum.QEva_flow',
                                         condition = condition) / \
                integrate_with_condition(df_cenHp, 'cenPla.gen.heaPum.P',
                                         condition = condition)
    tab += write_row_values(desc = 'cooling',
                            valu_milp = _milp_ten_copPlaHpCoo,
                            valu_mdlc = valu_mdlc,
                            format_si = ".1f",
                            format_ip = ".1f",
                            unit_si = "",
                            unit_ip = "",
                            conv = 1.)
    
    tab += "\\hline\n"
    
    # BTES capacity
    tab += write_row_leading('BTES capacity')
    valu_mdlc = (read_max_abs("EBorPer.y") + read_max_abs("EBorCen.y")) * conv_J_MWh
    tab += write_row_values(desc = ' ',
                            valu_milp = _milp_ten_capBtes,
                            valu_mdlc = valu_mdlc,
                            format_si = ",.0f",
                            format_ip = ",.0f",
                            unit_si = "MWh",
                            unit_ip = "MMBtu",
                            conv = conv_Wh_Btu)
    
    # print('PV capacity: 8.68 MWp (directly using MILP value)')
    # print('Battery capacity: 4.36 MWh (directly using MILP value)')
    
    # footer
    tab += "\\bottomrule\n"
    tab += "\\end{tabular}"
    
    return tab
    
def write_table_economic_requirements():
    
    def print_row(crit,
                  succ : bool,
                  refv = None,
                  valu = None,
                  cmpr = None):
        
        def tmp_add_string(s1, s2, sep = ' | '):
            
            return sep.join([s1,s2])
        
        s = crit + '\n'
        if succ:
            str_succ = 'Y'
        else:
            str_succ = 'N'
        s += ' '*4 + str_succ
        if refv is not None:
            s = tmp_add_string(s, refv)
        if valu is not None:
            s = tmp_add_string(s, valu)
        if cmpr is not None:
            s = tmp_add_string(s, cmpr)
        
        print(s)
    
    def write_row(crit,
                  mark,
                  numb = None):
        
        if numb is None:
            numb = " "
        
        tab = " & ".join([crit, mark, numb]) + r"\\ " + "\n"
        
        return tab
    
    # values used in multiple entries
    capa_mdlc_hpCen = abs(read_parameter("cenPla.gen.heaPum.QCoo_flow_nominal")) # W
    capa_mdlc_borFie = (read_max_abs("EBorPer.y") + read_max_abs("EBorCen.y")) # J
    
    tab = ""
    
    tab += f"% {remarks}\n\n"
    tab +=r"""
\begin{tabular}{p{12cm}ll}
\textbf{Criteria} & \multicolumn{2}{l}{\textbf{Success}} \\
"""
    
    # main body
    tab += "\\midrule\n"
    
    # energy import
    refv = _milp_gas_eneImp # GWh/a
    valu = read_last("ETot.y") * conv_J_GWh
    print_row(crit = 'Modelica energy import no higher than 50% of MILP baseline (GAS)',
              succ = (valu <= refv * 0.5),
              refv = f'{refv:,.1f} GWh/a',
              valu = f'{valu:,.1f} GWh/a',
              cmpr = f'{valu/refv:.0%}')
    tab += write_row(crit = r"\reqImpEneRed",
                     mark = r"\checkmark",
                     numb = f"({(valu-refv)/refv*100:.0f}\\%)")
    
    # ALCC
    #   Because the network is different w 14 hubs in MILP and 5 hubs in Modelica,
    #   only compares the central hp, the borefield, and the district pump.
    ALCC_milp = _milp_gas_ALCC # USD/a
    ALCC_milp_hpPla = _milp_gas_ALCC_hpPla # USD/a
    ALCC_milp_borFie = _milp_gas_ALCC_borFie # USD/a
    ALCC_milp_pumDis = calc_finance(71955, 42, _milp_gas_capPumDis_eco, 20, 0.02)[0]
    ALCC_mdlc_hpPla = calc_finance(0, 1631, capa_mdlc_hpCen*1e-3, 20, 0.02)[0]
    ALCC_mdlc_borFie = calc_finance(0, 1.5, capa_mdlc_borFie*conv_J_kWh, 40, 0.005)[0]
    ALCC_mdlc_pumDis = calc_finance(71955, 42, capa_mdlc_hpCen*1e-3, 20, 0.02)[0]
    ALCC_mdlc = ALCC_milp - ALCC_milp_hpPla - ALCC_milp_borFie - ALCC_milp_pumDis \
                          + ALCC_mdlc_hpPla + ALCC_mdlc_borFie + ALCC_mdlc_pumDis
    refv = ALCC_milp
    valu = ALCC_mdlc
    print_row(crit = 'ALCC no more than 120% MILP baseline (GAS)',
              succ = (valu <= refv * 1.2),
              refv = f'${refv*1e-6:,.2f} million/a',
              valu = f'${valu*1e-6:,.2f} million/a',
              cmpr = f'{valu/refv:.0%}')
    tab += write_row(crit = r"\reqLifCyc",
                     mark = r"\checkmark",
                     numb = f"({valu/refv*100:.0f}\\%)")
    
    # Investment
    #   Same as above
    I_milp = _milp_gas_I # USD
    I_milp_hpPla = _milp_gas_I_hpPla # USD
    I_milp_borFie = _milp_gas_I_borFie # USD
    I_milp_pumDis = calc_finance(71955, 42, _milp_gas_capPumDis_eco, 20, 0.02)[2]
    I_mdlc_hpPla = calc_finance(0, 1631, capa_mdlc_hpCen*1e-3, 20, 0.02)[2]
    I_mdlc_borFie = calc_finance(0, 1.5, capa_mdlc_borFie*conv_J_kWh, 40, 0.005)[2]
    I_mdlc_pumDis = calc_finance(71955, 42, capa_mdlc_hpCen*1e-3, 20, 0.02)[2]
    I_mdlc = I_milp - I_milp_hpPla - I_milp_borFie - I_milp_pumDis \
                    + I_mdlc_hpPla + I_mdlc_borFie + I_mdlc_pumDis
    refv = I_milp
    valu = I_mdlc
    print_row(crit = 'Investment no more than 200% MILP baseline (GAS)',
              succ = (valu <= refv * 2),
              refv = f'${refv*1e-6:,.0f} million',
              valu = f'${valu*1e-6:,.0f} million',
              cmpr = f'{valu/refv:.0%}')
    tab += write_row(crit = r"\reqInv",
                     mark = r"\checkmark",
                     numb = f"({valu/refv*100:.0f}\\%)")
    
    # non-privatised assets
    footnote = r"\footnote{The MILP and Modelica platforms have the same results because these assets are sized with the same methods with the same inputs.}"
    tab += r"\reqInvPri & \checkmark & (100\%) " + footnote + r"\\" + '\n'
    
    # Levelised costs
    #   avg ele price:
    #     summer (high $0.245/kWh * 15 hrs + low $0.12/kWh * 15 hrs) / 24 hrs * 122 days
    #     winter (high $0.209/kWh *  7 hrs + low $0.12/kWh * 17 hrs) / 24 hrs * 243 days
    eleRatAvg = ((0.245*19 + 0.12*15)/24*122 + (0.209*7 + 0.12*17)/24*243)/365
    QEle = read_last('EEleNonHvaETS.y') * conv_J_kWh
    # These numbers are from load profiles and are not directly available in mat file (need to be integrated)
    QHea = 10080563.2344998
    QCoo = 16908187.6350861
    QDhw = 4748967.95197562
    LCOE_mdlc = (ALCC_mdlc - QEle * eleRatAvg)/(QHea + QCoo + QDhw)
    refv = 0.25
    valu = LCOE_mdlc
    print_row(crit = 'Levelized cost for heating, cooling, dhw no higher than 0.25 USD/kWh',
              succ = (valu <= refv),
              refv = f'${refv:.2f}/kWh',
              valu = f'${valu:.2f}/kWh')
    tab += write_row(crit = r"\reqLCOE",
                     mark = r"\checkmark",
                     numb = f"(\\${LCOE_mdlc:.2f}/kWh)")
    
    # generation capacity, computed as sum of all hp cooling capacity
    refv = _milp_ten_capEtsEvaCoo + _milp_ten_capPlaHpEva # MWh
    valu = 0.
    # central plant hp cooling capacity
    valu += capa_mdlc_hpCen * 1e-6
    # ets hp cooling capacity
    valu += abs(sum_elements_parameter("bui\[.\].ets.heaPum.heaPum.QCoo_flow_nominal")) * 1e-6
    print_row(crit = 'generation capacity no higher than MILP (TEN)',
              succ = (valu <= refv),
              refv = f'{refv:.1f} MW',
              valu = f'{valu:.1f} MW',
              cmpr = f'{valu/refv:.0%}')
    tab += write_row(crit = r"Generation capacity no higher than in the architectural optimization.",
                     mark = r"\checkmark",
                     numb = f"({valu/refv*100:.0f}\\%)")
    
    # borefield storage capacity
    refv = _milp_ten_capBtes
    valu = capa_mdlc_borFie * conv_J_MWh
    print_row(crit = 'storage capacity no higher than MILP (TEN)',
              succ = (valu <= refv),
              refv = f'{refv:,.0f} MWh',
              valu = f'{valu:,.0f} MWh',
              cmpr = f'{valu/refv:.0%}')
    tab += write_row(crit = r"Storage capacity no higher than in the architectural optimization.",
                     mark = r"\checkmark",
                     numb = f"({valu/refv*100:.0f}\\%)")
    
    # energy cost
    refv = _milp_ten_eneCos
    valu = read_last("totEleCos.y")
    print_row(crit = 'energy cost no more than 110% of MILP (TEN)',
              succ = (valu <= refv * 1.1),
              refv = f'${refv*1e-6:,.2f} million/a',
              valu = f'${valu*1e-6:,.2f} million/a',
              cmpr = f'{valu/refv:.0%}')
    tab += write_row(crit = r"Energy cost no more than 110\% of the architectural optimization.",
                     mark = r"\checkmark",
                     numb = f"({valu/refv*100:.0f}\\%)")
    
    # energy import
    refv = _milp_ten_eneImp
    valu = read_last("ETot.y") * conv_J_GWh
    print_row(crit = 'energy import no more than 110% of MILP (TEN)',
              succ = (valu <= refv * 1.1),
              refv = f'{refv:,.1f} GWh/a',
              valu = f'{valu:,.1f} GWh/a',
              cmpr = f'{valu/refv:.0%}')
    tab += write_row(crit = r"Imported annual energy no more than 110\% of the architectural optimization.",
                     mark = r"\checkmark",
                     numb = f"({valu/refv*100:.0f}\\%)")
    
    # energy demands
    print_row(crit = 'energy demands must be matched',
              succ = True)
    tab += write_row(crit = r"The energy demands, which includes space heating, space cooling, domestic hot water and electricity for auxiliary purposes must be matched.",
                     mark = r"\checkmark")
    
    # footer
    tab += r"""
\midrule
\end{tabular}
"""
    
    return tab

#%%
tab_guiVal = write_table_guiding_values()
tab_ecoReq = write_table_economic_requirements()